**This is the final project in CS4280 and was a collective effort of P0, P1, P2 and P3. The 
end result was a built interpretive compiler that runs on Dr. Janikow's VirtMach**
=========================================================================================
Storage=Local 
Passes all test files: (s1, s2, s3) (p1, p2, p3, p4, p5, p6, p7, p8, p9, p10)

For keyboard input:
./comp
When done typing, CTRL+D to generate out.asm 
=========================================================================================
P4 Code Generation

Storage = Local 

No late submissions without approval. The following people (posted by Sunday) must present in person.

***I was selected :(***

Failure to show will result in 0 points. Others are welcome to come in.

Submission command
/accounts/classes/janikowc/submitProject/submit_cs42801_P4 SubmitFileOrDirectory
Invocation

comp [file]
where file is as before with implicit extension. Wrong invocations will not be graded.

Details
The program is to parse the input, generate a parse tree, perform static semantics, and then generate a target file. Any error should display detailed message, including line number if available (depending on scanner).

The target name should be

out.asm if keyboard input
file.asm if file input. The base name matches that of the input file
The program has 2 parts to be properly generated:

Code generation
120
Storage allocation global option 30 (+20 for local)

Global - all variables allocated globally.
Local - variables outside of a block are scoped in the entire program, variables in a block are scoped in that block
Note that this does not have to match your static semantics but local storage will use the same mechanisms as local semantics.

An included README.txt file must say Storage=Global or Local on the first line. Otherwise global will be assumed. Also please list on the 2nd line in the README.txt file list the test program names that work correct and on the 3rd line the ones that dont and what happens (wrong output or core dump or the asm file doesnt run). If you didnt run test, state in there why you didnt test.

Temporary variables can processed as global scope even when doing local scoping for user variables.

Upon success, only display the name of the target file generated and no other output. Upon error and the error message, no other display and no target should be generated.

=========================================================================================
Project Detail Cliff Notes:

.asm target language
o BR (1, jump to arg)
o BRNEG (1, jump to arg if ACC <0)
o BRZNEG (1, jump to arg if ACC <=0)
o BRPOS (1, jump to arg if ACC >0)
o BRZPOS (1, jump to arg if ACC >=0)
o BRZERO (1, jump to arg if ACC ==0)
o COPY (2, arg1 = arg2)
o ADD (1, ACC = ACC +argoSUB (1, ACC = ACC - arg)
o DIV (1, ACC = ACC / arg)oMULT (1, ACC = ACC * arg)
o READ (1, arg=input integer)
o WRITE (1, put arg to output as integer)
o STOP (0, stop program)
o STORE (1, arg = ACC)
o LOAD (1, ACC=arg)
o NOOP (0, nothing)

• ADD, DIV, MULT, WRITE, LOAD, SUB
    o can take either variable or immediate value as the argument
    o immediate value is positive integer or negative 2-byte integer

PUSH/POP
• are only means to reserve/delete automatic storage.

STACKW/STACKR n
 • these are stack access (random access) instructions.
 • n must be a non-negative number
 • the access is to nth element down from TOS
    NOTE: TOS points to the topmost element on the stack

o PUSH (0, tos++)
o POP (0, tos--)
o STACKW (1,stack[tos-arg]=ACC)
o STACKR (1,ACC=stack[tos-arg])

=========================================================================================

Static Semantics Definition

The only static semantics we impose that can be processed by the compiler (static) are proper use of variables.
Variables
Variables have to be defined before used first time (after satisfying syntax)
Variable name can only be defined once in a scope but can be reused in another scope. There are two options for scope

LOCAL SCOPE option

Variables outside of a block are global
Variables in a given block are scoped in this block
Rules as in C (smaller scope hides the outer/global scope variable)

=========================================================================================

Parser (P2) and Scanner (P1) - returns a tree based on BNF:

< program >    ->      <vars> <block>
< block >      ->      Begin <vars> <stats> End
< vars >       ->      empty | INT Identifier Integer <vars>
< expr >       ->      <A> <K>
< k >          ->      + <expr> | - <expr> | empty
< a >          ->      <N> * <A> | <N>
< n >          ->      <M> / <N> | <M>
< m >          ->      - <M> |  <R>
< r >          ->      [ <expr> ] | Identifier | Integer
< stats >      ->      <stat> : <mStat>
< mStat >      ->      empty |  <stat>  :  <mStat>
< stat >       ->      <in> | <out> | <block> | <if> | <loop> | <assign>
< in >         ->      Read [ Identifier ]
< out >        ->      Output [ <expr> ]
< if >         ->      IFF [ <expr> <ro> <expr> ] <stat>
< loop >       ->      Loop [ <expr> <ro> <expr> ] <stat>
< assign >     ->      Identifier  = <expr>
< ro >         ->      < | = <  | >  | = > | =  =  |   =

<mStat>, <vars> return NULL if empty

invoke with ./comp [filename]
            ./comp
      No file options read from the keyboard CTRL+D to simulate EOF on Linux

=========================================================================================
Lexical Definitions

Case sensitive
Each scanner error should display "Scanner Error:" followed by details including the line number if counted
Alphabet
    all English letters (upper and lower), digits, plus the extra characters as seen below, plus WS
    No other characters allowed and they should generate errors
Identifiers
    begin with a an upper case letter and
    continue with any number of letters or digits
    you may assume no identifier is longer than 8 characters
Keywords (reserved, suggested individual tokens)
    Begin  End Loop Void INT Return Read Output Program IFF  Then Let
Operators and delimiters group
    =  <  >  :   +  -  *  /   %  . (  ) , { } ; [ ]
Integers
    any sequence of decimal digits, no sign, no decimal point
    you may assume no number longer than 8 characters
Comments start with \ and end with new line
